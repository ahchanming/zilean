// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: touch_message.proto

#ifndef PROTOBUF_touch_5fmessage_2eproto__INCLUDED
#define PROTOBUF_touch_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_touch_5fmessage_2eproto();
void protobuf_AssignDesc_touch_5fmessage_2eproto();
void protobuf_ShutdownFile_touch_5fmessage_2eproto();

class TouchMessage;

// ===================================================================

class TouchMessage : public ::google::protobuf::Message {
 public:
  TouchMessage();
  virtual ~TouchMessage();

  TouchMessage(const TouchMessage& from);

  inline TouchMessage& operator=(const TouchMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TouchMessage& default_instance();

  void Swap(TouchMessage* other);

  // implements Message ----------------------------------------------

  TouchMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TouchMessage& from);
  void MergeFrom(const TouchMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // required string dataVersion = 2;
  inline bool has_dataversion() const;
  inline void clear_dataversion();
  static const int kDataVersionFieldNumber = 2;
  inline const ::std::string& dataversion() const;
  inline void set_dataversion(const ::std::string& value);
  inline void set_dataversion(const char* value);
  inline void set_dataversion(const char* value, size_t size);
  inline ::std::string* mutable_dataversion();
  inline ::std::string* release_dataversion();
  inline void set_allocated_dataversion(::std::string* dataversion);

  // required string timeStamp = 3;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimeStampFieldNumber = 3;
  inline const ::std::string& timestamp() const;
  inline void set_timestamp(const ::std::string& value);
  inline void set_timestamp(const char* value);
  inline void set_timestamp(const char* value, size_t size);
  inline ::std::string* mutable_timestamp();
  inline ::std::string* release_timestamp();
  inline void set_allocated_timestamp(::std::string* timestamp);

  // required string appVersion = 4;
  inline bool has_appversion() const;
  inline void clear_appversion();
  static const int kAppVersionFieldNumber = 4;
  inline const ::std::string& appversion() const;
  inline void set_appversion(const ::std::string& value);
  inline void set_appversion(const char* value);
  inline void set_appversion(const char* value, size_t size);
  inline ::std::string* mutable_appversion();
  inline ::std::string* release_appversion();
  inline void set_allocated_appversion(::std::string* appversion);

  // @@protoc_insertion_point(class_scope:TouchMessage)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_dataversion();
  inline void clear_has_dataversion();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_appversion();
  inline void clear_has_appversion();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* uid_;
  ::std::string* dataversion_;
  ::std::string* timestamp_;
  ::std::string* appversion_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_touch_5fmessage_2eproto();
  friend void protobuf_AssignDesc_touch_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_touch_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static TouchMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// TouchMessage

// required string uid = 1;
inline bool TouchMessage::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TouchMessage::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TouchMessage::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TouchMessage::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& TouchMessage::uid() const {
  return *uid_;
}
inline void TouchMessage::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void TouchMessage::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void TouchMessage::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TouchMessage::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* TouchMessage::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TouchMessage::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string dataVersion = 2;
inline bool TouchMessage::has_dataversion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TouchMessage::set_has_dataversion() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TouchMessage::clear_has_dataversion() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TouchMessage::clear_dataversion() {
  if (dataversion_ != &::google::protobuf::internal::kEmptyString) {
    dataversion_->clear();
  }
  clear_has_dataversion();
}
inline const ::std::string& TouchMessage::dataversion() const {
  return *dataversion_;
}
inline void TouchMessage::set_dataversion(const ::std::string& value) {
  set_has_dataversion();
  if (dataversion_ == &::google::protobuf::internal::kEmptyString) {
    dataversion_ = new ::std::string;
  }
  dataversion_->assign(value);
}
inline void TouchMessage::set_dataversion(const char* value) {
  set_has_dataversion();
  if (dataversion_ == &::google::protobuf::internal::kEmptyString) {
    dataversion_ = new ::std::string;
  }
  dataversion_->assign(value);
}
inline void TouchMessage::set_dataversion(const char* value, size_t size) {
  set_has_dataversion();
  if (dataversion_ == &::google::protobuf::internal::kEmptyString) {
    dataversion_ = new ::std::string;
  }
  dataversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TouchMessage::mutable_dataversion() {
  set_has_dataversion();
  if (dataversion_ == &::google::protobuf::internal::kEmptyString) {
    dataversion_ = new ::std::string;
  }
  return dataversion_;
}
inline ::std::string* TouchMessage::release_dataversion() {
  clear_has_dataversion();
  if (dataversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dataversion_;
    dataversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TouchMessage::set_allocated_dataversion(::std::string* dataversion) {
  if (dataversion_ != &::google::protobuf::internal::kEmptyString) {
    delete dataversion_;
  }
  if (dataversion) {
    set_has_dataversion();
    dataversion_ = dataversion;
  } else {
    clear_has_dataversion();
    dataversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string timeStamp = 3;
inline bool TouchMessage::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TouchMessage::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TouchMessage::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TouchMessage::clear_timestamp() {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    timestamp_->clear();
  }
  clear_has_timestamp();
}
inline const ::std::string& TouchMessage::timestamp() const {
  return *timestamp_;
}
inline void TouchMessage::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void TouchMessage::set_timestamp(const char* value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void TouchMessage::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TouchMessage::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  return timestamp_;
}
inline ::std::string* TouchMessage::release_timestamp() {
  clear_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = timestamp_;
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TouchMessage::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (timestamp) {
    set_has_timestamp();
    timestamp_ = timestamp;
  } else {
    clear_has_timestamp();
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string appVersion = 4;
inline bool TouchMessage::has_appversion() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TouchMessage::set_has_appversion() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TouchMessage::clear_has_appversion() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TouchMessage::clear_appversion() {
  if (appversion_ != &::google::protobuf::internal::kEmptyString) {
    appversion_->clear();
  }
  clear_has_appversion();
}
inline const ::std::string& TouchMessage::appversion() const {
  return *appversion_;
}
inline void TouchMessage::set_appversion(const ::std::string& value) {
  set_has_appversion();
  if (appversion_ == &::google::protobuf::internal::kEmptyString) {
    appversion_ = new ::std::string;
  }
  appversion_->assign(value);
}
inline void TouchMessage::set_appversion(const char* value) {
  set_has_appversion();
  if (appversion_ == &::google::protobuf::internal::kEmptyString) {
    appversion_ = new ::std::string;
  }
  appversion_->assign(value);
}
inline void TouchMessage::set_appversion(const char* value, size_t size) {
  set_has_appversion();
  if (appversion_ == &::google::protobuf::internal::kEmptyString) {
    appversion_ = new ::std::string;
  }
  appversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TouchMessage::mutable_appversion() {
  set_has_appversion();
  if (appversion_ == &::google::protobuf::internal::kEmptyString) {
    appversion_ = new ::std::string;
  }
  return appversion_;
}
inline ::std::string* TouchMessage::release_appversion() {
  clear_has_appversion();
  if (appversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appversion_;
    appversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TouchMessage::set_allocated_appversion(::std::string* appversion) {
  if (appversion_ != &::google::protobuf::internal::kEmptyString) {
    delete appversion_;
  }
  if (appversion) {
    set_has_appversion();
    appversion_ = appversion;
  } else {
    clear_has_appversion();
    appversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_touch_5fmessage_2eproto__INCLUDED
